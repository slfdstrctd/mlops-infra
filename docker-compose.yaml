version: '3.7'

services:
  postgres:
    image: postgres:13
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  minio:
    image: minio/minio:latest
    command: server --console-address :9001 /data
    restart: unless-stopped
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/data
  minio-create-bucket:
    image: minio/mc
    restart: unless-stopped
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      bash -c "
            mc alias set minio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY} &&
            if mc ls minio/mlflow >/dev/null 2>&1; then
              echo 'bucket already exists'
            else
              mc mb minio/mlflow
            fi
      "


  mlflow:
    build: ./mlflow
    image: mlflow_server
    ports:
      - "5000:5000"
    restart: unless-stopped
    environment:
      BACKEND_STORE_URI: postgresql://mlflow:mlflow@postgres/mlflow
      ARTIFACT_ROOT: s3://mlflow/
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
    depends_on:
      - postgres
      - minio
    command: mlflow server --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB} --default-artifact-root s3://mlflow/ --host 0.0.0.0

  nexus:
    restart: unless-stopped
    image: sonatype/nexus3
    ports:
      - "8081:8081"
    volumes:
      - nexus-data:/nexus-data

  prometheus:
    container_name: dev_prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    hostname: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    container_name: dev_grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    hostname: grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/datasource.yml:/etc/grafana/provisioning/datasource.yml
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}

volumes:
  pgdata:
  miniodata:
  nexus-data:

